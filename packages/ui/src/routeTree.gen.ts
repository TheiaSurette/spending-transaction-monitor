/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedTransactionsRouteImport } from './routes/_protected/transactions'
import { Route as ProtectedAlertsRouteImport } from './routes/_protected/alerts'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedTransactionsRoute = ProtectedTransactionsRouteImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedAlertsRoute = ProtectedAlertsRouteImport.update({
  id: '/alerts',
  path: '/alerts',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/alerts': typeof ProtectedAlertsRoute
  '/transactions': typeof ProtectedTransactionsRoute
  '/': typeof ProtectedIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/alerts': typeof ProtectedAlertsRoute
  '/transactions': typeof ProtectedTransactionsRoute
  '/': typeof ProtectedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_protected/alerts': typeof ProtectedAlertsRoute
  '/_protected/transactions': typeof ProtectedTransactionsRoute
  '/_protected/': typeof ProtectedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/alerts' | '/transactions' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/alerts' | '/transactions' | '/'
  id:
    | '__root__'
    | '/_protected'
    | '/login'
    | '/_protected/alerts'
    | '/_protected/transactions'
    | '/_protected/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/transactions': {
      id: '/_protected/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof ProtectedTransactionsRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/alerts': {
      id: '/_protected/alerts'
      path: '/alerts'
      fullPath: '/alerts'
      preLoaderRoute: typeof ProtectedAlertsRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedAlertsRoute: typeof ProtectedAlertsRoute
  ProtectedTransactionsRoute: typeof ProtectedTransactionsRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedAlertsRoute: ProtectedAlertsRoute,
  ProtectedTransactionsRoute: ProtectedTransactionsRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
